第17章 容器深入研究

    17.4 可选操作
        1. Arrays.asList()会生成一个List，它基于一个固定大小的数组，仅支持那些不会改变数组大小的操作。
            任何会引起对底层数据结构尺寸修改的方法都会产生一个UnsupportedOperationException异常。
            应该把Arrays.asList()的结果作为构造器的参数传递给任何Collection，这样可以生成允许尺寸可调
            的底层数据结构。
    17.6 Set和存储顺序
        1. Set(interface) Set不保存重复元素，不保证维护元素次序。加入Set元素必须实现equals方法确保对象唯一性。
        2. HashSet 为快速查找设计的Set，存入元素必须定义hashCode()
        3. TreeSet 保持次序的Set，底层为树结构。存入元素必须实现Comparable接口。
        4. LinkedHashSet 具有HashSet速度，维护元素的插入次序。
    18.8 理解map
        1. HashMap Map基于散列表的实现（取代了HashTable）。插入和查询“键值对”的开销是固定的。可以通过构造器设置容量和负载因子，以调整容器性能。
        2. LinkedHashTable 类似HashMap，迭代遍历时，取得“键值对”的顺序是其插入顺序，或者最近最少使用（LRU）的顺序。只比HashMap慢一点，迭代访
            问时反而更快，它使用链表维护内部次序。
        3. TreeMap 基于红黑树的实现。查看键或键值对时，它们会被排序（次序由Comparable或Comparator决定）。TreeMap的特点在于，所得到的结果是经过
            排序的。TreeMap是唯一带有subMap()方法的Map，它可以返回一个子树。
        4. WeakHashMap 弱键(weak key)映射，允许释放映射所指向的对象。如果映射之外没有引用指向某个键，则此键可以被垃圾回收器回收。
        5. ConcurrentHashMap 一种线程安全的Map，它不涉及同步加锁。
        6. IdentityHashMap 使用==代替equals()对键进行比较的散列映射。
